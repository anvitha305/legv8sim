%YAML 1.2
---
name: LEG-V8
file_extensions: [s]
scope: source.asm
variables:
  bname: '[A-Za-z_][A-Za-z_0-9]*'
  ops: '(add|sub|mul|div)'
  log: '(and|orr|eor)'
  cond: '(?i)l(e|t|s|o)|g(e|t)|h(i|s)|v(c|s)|c(s|c)|eq|ne|hs|mi|pl|al'
contexts:
  main:
    # comments in LEGV8
    - match: '//'
      scope: punctuation.definition.comment.asm
      push: line_comment
    # symbols eg .type and .global/.globl
    - match: '.(type|glob(a)?l|data|word)'
      scope: keyword.control.import.asm
    # registers x0-x31
    - match: '\b(?i)(x([0-9]|[12][0-9]|[3][0-1]))\b'
      scope: variable.language.asm
    # other aliasing for register names
    - match: '\b(?i)(ip[0-1]|sp|fp|lr|xzr)\b'
      scope: variable.language.asm
    # constants in LEGV8
    - match: '\#[0-9.]+'
      scope: constant.numeric.integer.asm

    # instructions:
    # im-type instructions
    - match: '\b(?i)(mov(k|z)?)\b'
      scope: keyword.operator.word.asm
    # d-type instructions [complete set]
    - match: '\b(?i)((ldur)(b|h|sw)?|(ld|st)(xr|a)
      |(stur)(b|h|w)?)\b'
      scope: keyword.operator.word.asm
    # i-type instructions [complete set]
    - match: '\b(?i)((add|sub)i(s)?|andis|{{log}}i?|cmpi|ldi)\b'
      scope: keyword.operator.word.asm
    # r-type instructions [complete set]
    - match: \b(?i)(ands|(f({{ops}}|cmp))(s|d)|(?i){{ops}}(s)?|{{log}})|(br|ls(l|r)|(s|u)(div|mulh)|(ldur|stur)(s|d)|cmp)\b
      scope: keyword.operator.word.asm
    # cb-type instructions [complete set]
    - match: '\b((?i)(cb(n)?z|b\.{{cond}}))\b'
      scope: keyword.control.asm
      push: break_address
    # b-type instructions [complete set]
    - match: '\b(?i)(b(l)?)\b'
      scope: keyword.control.asm
      push: break_address
    # branch labelling  
    - match: '{{bname}}:|{{bname}}\(\)'
      scope: entity.name.function.asm 
  line_comment:
      - meta_scope: comment.line.asm
      - match: $
        pop: true
  break_address:
      - meta_scope: entity.name.function.asm
      - match: '\b{{bname}}\b'
        pop: true